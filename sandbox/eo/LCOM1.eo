# lcom1(основное вычисление метрики, передаем количество пустых и непустых) и если непустых больше чем пустых, то 0, иначе разность пустых и непустых)
#
#  pairsofmethods  было(получили массив всех уникальных пар методов)
#
#  rec1(принимает массив пар методов и начальный индекс 0)
#  проверяет  индекс с длинной массива
#  берет первую пару(метод(0) и метод(0+1)), присваивает их в переменные соответственно
#  запускает рекурсию для списка атрибутов двух методов(передаем список атрибутов одного и второго и индекс 0), рекурсия возвращает результат 0 или 1 присваиваем переменной paircohesion
#  создаем пустой массив и присваиваем переменной mthdscohesion(он содержит массив нулей и единиц в зависимости от cohesion пары методов)
#  запускаем рекурсию для следующей пары элементов потому что перечедаем индекс начальный +1+1, то есть перескакиваем на следующую пару методов
#
#  rec2(принимает массив атрибутов одного метода(atts1) и массив атрибутов другого(atts2), начальный индекс 0)
#  для каждого элемента массива atts2 проверяем, если совпадает имя с текущим atts1 от индекса(начальный 0), то возвращаем 1
#  иначе 0
#  и запускаем рекурсию для следующего(здесь единственное, я не додумался как сделать так чтобы при первом совпадении рекурсия завершалась и возвращала 1)
#  соответственно передаем в повторную рекурсию те же два списка атрибутов и индекс увеличенный на единицу
+package sandbox
+alias sprintf org.eolang.txt.sprintf
+alias sandbox.count

att "A" > testAttA
att "B" > testAttB
att "C" > testAttC

* > testAtts
  testAttA
  testAttB

method > testMethodA
  "onlyA"
  *
    testAttA
method > testMethodB
  "onlyB"
  *
    testAttB
method > testMethodC
  "onlyC"
  *
    testAttC
method > testMethodAB
  "methodAB"
  *
    testAttA
    testAttB
method > testMethodAC
  "methodAC"
  *
    testAttA
    testAttC
method > testMethodBC
  "methodBC"
  *
    testAttB
    testAttC
method > testMethodABC
  "methodABC"
  *
    testAttA
    testAttB
    testAttC

* > testMethods
  testMethodA
  testMethodB
  testMethodAB


class > testClass
  "testClass"
  testMethods
  testAtts

[name methods atts] > class
  pairsofmethods methods > pairs

[name atts] > method
  atts > listofatts
  name > mthdname

[name] > att
  name > attname

[a b] > tuple

[methods] > pairsofmethods
  [i1 accum cur1] > reducer2
    [el cur2 i2] > reducei
      if. > @
        (i2.leq (^.i1))
        (^.accum)
        (^.accum).append (tuple (^.cur1) (^.cur2))
  [] > reducer
    [accum cur1 i1] > reducei
      reducei. > @
        (^.methods)
        accum
        ((^.reducer2) i1 accum cur1)
  reducei. > @
    methods
    *
    reducer

[att1 att2 index] > rec2
  if. > @
    index.less (att1.length)
    reduce.
      att2
      0
      []
        [current accum] > reduce
          if. > @
            eq.
              current.attname
              (^.^.att1.get (^.^.index)).attname
            1
            accum
    rec2 att1 att2 (index.add 1)

[arr index mthdscohesion] > rec1
  if. > @
    index.less (arr.length)
    mthdscohesion.append
     rec2 (((arr.get index).a).listofatts) (((arr.get index).b).listofatts) 0
    rec1 arr (index.add 1) mthdscohesion

[p q] > lcom1
  if. > @
    q.less p
    0
    sub.
      p
      q

[args...] > appLCOM1
  testClass > name1
  * > mthdscohesion
  rec1 (name1.pairs) 0 mthdscohesion > subres
  lcom1 (count (subres.mthdscohesion) 0) (count (subres.mthdscohesion) 1) > res
  sprintf > @
    "LCOM1 metric is %d\n"
    res
