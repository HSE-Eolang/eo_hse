package org.eolang.core;

import org.eolang.core.data.EOData;

import java.util.function.Supplier;

/**
 * Thunking is the technique that allows the user-defined code (i.e. generated by transpiler)
 * to perform delayed (or lazy) object application/instantiation of a wrapped object.
 * The thunk unwraps the wrapped object only when it is needed (so, it is lazy).
 * When any message (method call) is sent for the first time,
 * the thunk instantiates the wrapped object and saves it to its internal state.
 * After it, the thunk delivers the message to the wrapped object.
 * Any further message is delivered directly to the saved object.
 */
public class EOThunk extends EOObject {

    /**
     * The saved instance of the wrapped object.
     */
    private EOObject computed;

    /***
     * The lambda that is used to instantiate the wrapped object lazily.
     */
    private Supplier<EOObject> thunk;

    /**
     * Creates a lazy (delayed) instantiation of a wrapped object.
     *
     * @param thunk A lambda that describes how the wrapped object is instantiated.
     */
    public EOThunk(Supplier<EOObject> thunk) {
        this.thunk = thunk;
    }

    /**
     * Unwraps the wrapped object. Called only once (when any message is sent to the thunk for the first time).
     */
    private void compute() {
        computed = thunk.get();
    }

    @Override
    public EOObject _getDecoratedObject() {
        if (computed == null) {
            compute();
        }
        return computed._getDecoratedObject();
    }

    @Override
    public EOObject _getParentObject() {
        if (computed == null) {
            compute();
        }
        return computed._getParentObject();
    }

    @Override
    public EOData _getData() {
        if (computed == null) {
            compute();
        }
        return computed._getData();
    }

    @Override
    public EOObject _getAttribute(String name, EOObject... arguments) {
        if (computed == null) {
            compute();
        }
        return computed._getAttribute(name, arguments);
    }
}
